@startuml "Package instructions"

namespace zoot.arbre.instructions {
    ' Includes
    ' Classes
    class Ecrire {
        + Ecrire (Expression e, int n)
        + void verifier()
        + String toMIPS()
        + void sAjouter(ConteneurDInstructions c)
    }

    class Affectation {
        + Affectation (Variable v, Expression e, int n)
        + void verifier()
        + String toMIPS()
        + void sAjouter(ConteneurDInstructions c)
    }

    class Retourne {
        - int tailleZoneVariables
        + Retourne(Expression e, int n)
        + void verifier()
        + String toMIPS()
        + Optional<Type> getType()
        + void sAjouter(ConteneurDInstructions c)
        + void setTailleZoneVariables(int tailleZoneVariables)
        + int getTailleZoneVariables()
    }

    class Condition {
        + Condition (Expression condition, BlocDInstructions blocConditionVerifiee, BlocDInstructions blocConditionNonVerifiee, int n)
        + void verifier()
		+ String toMIPS()
        + void sAjouter(ConteneurDInstructions c)
        + void ajouter(Ecrire e)
        + void ajouter(Affectation a)
        + void ajouter(Retourne e)
        + void ajouter(ConteneurDInstructions c)
        + void ajouter(Boucle b)
        + void ajouter(Condition c)
    }

    class Boucle {
        + Boucle (Expression condition, BlocDInstructions instructionsBoucle, int n)
        + void verifier()
		+ String toMIPS()
        + void sAjouter(ConteneurDInstructions c)
        + void ajouter(Ecrire e)
        + void ajouter(Affectation a)
        + void ajouter(Retourne e)
        + void ajouter(ConteneurDInstructions c)
        + void ajouter(Boucle b)
        + void ajouter(Condition c)
    }

    abstract class Instruction {
        # Instruction(int n)
        + abstract void sAjouter(ConteneurDInstructions c)
    }
    
    ' Relations entre les classes
    Ecrire -up-|> Instruction
    Ecrire *-right- zoot.arbre.expressions.Expression
    Instruction -up-|> zoot.arbre.ArbreAbstrait
    Affectation -right-|> Instruction
    Affectation *-- zoot.arbre.expressions.Variable
    Affectation *-down- zoot.arbre.expressions.Expression
    Retourne *-- zoot.arbre.expressions.Expression
    Retourne --|> Instruction
    Condition -down-|> Instruction
    Condition --"2" zoot.arbre.BlocDInstructions
    Condition --"1" zoot.arbre.expressions.Expression : condition
    Condition ..|> zoot.arbre.ConteneurDInstructions
    Condition --"*" Retourne
    Boucle -up-|> Instruction
    Boucle --"1" zoot.arbre.BlocDInstructions
    Boucle --"1" zoot.arbre.expressions.Expression : condition
    Boucle ..|> zoot.arbre.ConteneurDInstructions
    Boucle --"*" Retourne
}

@enduml