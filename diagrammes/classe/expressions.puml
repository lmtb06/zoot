@startuml "Package expressions"
namespace zoot.arbre.expressions {
    ' Includes
    ' Classes
    abstract class Expression {
        # Expression(int n)
        + Optional<Type> getType()
        + abstract int getNombreDePlaces()
        + abstract String toMips(List<String> registres)
    }

    abstract class Constante {
        # String cste
        # Constante(String texte, int n)
        + String toString()
        + int getNombreDePlaces()
    }

    class ConstanteEntiere {
        + ConstanteEntiere(String texte, int n)
        + Optional<Type> getType()
        + String toMIPS()
        + String toMips(List<String> registres)
    }

    class ConstanteBooleene {
        + ConstanteBooleene(String texte, int n)
        + Optional<Type> getType()
        + String toMIPS()
        + String toMips(List<String> registres)

    }

    abstract class Identifiable {
        - String identifiant
        + Identifiable(String identifiant, int n)
        + Optional<Type> getType()
        + int getNombreDePlaces()
    }

    class Variable {
        - int deplacement
        - int niveauImbrication
        + Variable(String identifiant, int n)
        + void setDeplacement(int deplacement)
        + int getDeplacement()
        + void setNiveauImbrication(int niveauImbrication)
        + int getNiveauImbrication()
        + void verifier()
        + String toMIPS()
        + String toMips(List<String> registres)
    }

    class AppelFonction {
        - int niveauImbrication
        - int tailleDisplay
        - int tailleZoneParametres
        - String etiquette
        + AppelFonction(String identifiant, int n, Expression... parametres)
        + int getTailleZoneParametres()
        + void setTailleDisplay(int tailleDisplay)
        + int getTailleDisplay()
        + void setNiveauImbrication(int niveauImbrication)
        + int getNiveauImbrication()
        + void setEtiquette(String etiquette)
        + String getEtiquette()
        + Iterator<Expression> getParametres()
        + void verifier()
        + String toMIPS()
        + String toMips(List<String> registres)
    }

    namespace operateurs {
        namespace binaire {
            abstract Binaire {
                + Binaire(Expression gauche, Expression droite, int n)
                + int getNombreDePlaces()
                + void verifier()
                + String toMIPS()
            }

            class Somme {
                + Somme(Expression gauche, Expression droite, int n)
                + String toMips(List<String> registres)
                + Optional<Type> getType()
            }

            class Multiplication {
                + Multiplication(Expression gauche, Expression droite, int n)
                + String toMips(List<String> registres)
                + Optional<Type> getType()
            }

            class InferieurA {
                + InferieurA(Expression gauche, Expression droite, int n)
                + String toMips(List<String> registres)
                + Optional<Type> getType()
            }

            class EquivautA {
                + EquivautA(Expression gauche, Expression droite, int n)
                + String toMips(List<String> registres)
                + Optional<Type> getType()
            }

            class DifferentDe {
                + DifferentDe(Expression gauche, Expression droite, int n)
                + String toMips(List<String> registres)
                + Optional<Type> getType()
            }

            class Et {
                + Et(Expression gauche, Expression droite, int n)
                + String toMips(List<String> registres)
                + Optional<Type> getType()
            }

            class Ou {
                + Ou(Expression gauche, Expression droite, int n)
                + String toMips(List<String> registres)
                + Optional<Type> getType()
            }
        }

        namespace unaire {
            abstract Unaire {
                + Unaire(Expression expression, int n)
                + int getNombreDePlaces()
                + abstract String toMips(List<String> registres)
                + String toMIPS()
                + void verifier()
            }

            class Moins {
                + Moins(Expression expression, int n)
                + String toMips(List<String> registres)
                + Optional<Type> getType()
            }

            class Non {
                + Non(Expression expression, int n)
                + String toMips(List<String> registres)
                + Optional<Type> getType()
            }
        }

    }

    ' Relations entre les classes
    Expression -up-|> zoot.arbre.ArbreAbstrait
    Constante -up-|> Expression
    ConstanteEntiere -up-|> Constante
    ConstanteBooleene -right-|> Constante
    Identifiable *-up- zoot.tds.symboles.Symbole
    Identifiable -left-|> Expression
    Variable -up-|> Identifiable
    AppelFonction -left-|> Identifiable
    AppelFonction --"*" Expression : parametres
    Binaire -right-|> Expression
    Somme -up-|> Binaire
    Multiplication -up-|> Binaire
    DifferentDe -up-|> Binaire
    Et -up-|> Binaire
    EquivautA -down-|> Binaire
    Ou -down-|> Binaire
    InferieurA -down-|> Binaire
    Binaire --"2" Expression : expressions
    Unaire --"1" Expression

    Unaire --|> Expression
    Non -down-|> Unaire
    Moins -down-|> Unaire
}
@enduml