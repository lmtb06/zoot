package zoot.analyse ;

import java.util.*;
import zoot.analyse.* ;
import zoot.arbre.* ;
import zoot.arbre.expressions.* ;
import zoot.arbre.instructions.* ;
import zoot.code_generation.* ;
import zoot.exceptions.*;
import zoot.tds.*;
import zoot.tds.entrees.*;
import zoot.tds.symboles.*;

import java_cup.runtime.*;

action code {:
             :} ;

parser code {:

    public void report_error(String message, Object info) {

        HashMap<Integer, String> lesTerminaux = new HashMap<>() ;
    
        lesTerminaux.put(new Integer(CodesLexicaux.DEBUT), "debut") ;
        lesTerminaux.put(new Integer(CodesLexicaux.FIN), "fin") ;
        lesTerminaux.put(new Integer(CodesLexicaux.POINTVIRGULE), ";") ;

        StringBuffer m = new StringBuffer() ;

        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {                
                m.append("\tligne : " + (s.left + 1)) ;
                if (s.right >= 0)                    
                    m.append(" colonne : " + (s.right+1)) ;
            }
            
            if (s.value != null) {
                lesTerminaux.put(CodesLexicaux.CSTENTIERE, "" + s.value) ;
            }

            if (lesTerminaux.containsKey(new Integer(s.sym))) {
                m.append(" dernier token lu : " + lesTerminaux.get(new Integer(s.sym))) ;
            }
            else {
                m.append(" expression non terminée") ;
            }

        }
        throw new AnalyseSyntaxiqueException("" + m) ;
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
    }
:};
   
/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
/* Terminals (tokens returned by the scanner).  */

terminal Symbol    VARIABLES, FONCTIONS, DEBUT, FIN, POINTVIRGULE, ECRIRE, EGAL, PARENTHESEOUVERTE,
PARENTHESEFERMEE, RETOURNE, VIRGULE ;
terminal String    TYPE, CSTENTIERE, CSTBOOL, IDF ;

/* Non terminals used in the grammar section.  */
non terminal Programme PROG;
non terminal BlocDeFonctions LFONC;
non terminal BlocDInstructions LINST, LINSTF;
non terminal Fonction FONC;
non terminal Instruction INST, INSTF, RETOURNEI ;
non terminal Expression EXP ;
non terminal ArrayList<Expression> LEXP;
non terminal String[] DECL;
non terminal ArrayList<String[]> LDECL, VARSF, PARAMETRES;
non terminal ArrayList<Expression> PAR_EFF ;

/* ----------------------------Grammar Section-------------------- */

start with PROG ;

PROG    ::=     VARIABLES:v LDECL:ld FONCTIONS LFONC:lf DEBUT  LINST:li  FIN
                {:
                    // Je n'ai pas mis de entreeBloc et sortieBloc pour le main pour simplifier, c'est géré dans
                    // l'initialisation de la TDS

                    // Déclarations
                    for (String[] declaratinVar : ld) {
                        Type typeVariable = Type.fromString(declaratinVar[0]);

                        SymboleVariable s = new SymboleVariable(typeVariable);
                        try{
                            TDS.getInstance().ajouter(new EntreeVariable(declaratinVar[1]), s);
                        } catch (DoubleDeclarationException e) {
                            GestionnaireExceptionsSemantiques.getInstance()
                                                .ajouter(new LigneDecorator(Integer.valueOf(declaratinVar[2]), e));
                        }

                        s.setEspaceDeNom(TDS.getInstance().getEspaceDeNomCourant());
                        s.setDeplacement(-TDS.getInstance().getTailleZoneVariables());
                        TDS.getInstance().augmenterTailleZoneVariables(typeVariable.taille);
                    }

                    Programme main = new Programme(lf, li, vleft + 1);
                    TDS.getInstance().allerEtatSuivant();
                    RESULT = main ;
                :}
                ;

LFONC   ::=     LFONC:bf FONC:f
                {:
                    bf.ajouter(f);
                    RESULT = bf;
                 :}
        |
                FONC:f
                {:
                    BlocDeFonctions bf = new BlocDeFonctions(fleft + 1) ;
                    bf.ajouter(f) ;
                    RESULT = bf ;
                :}
                ;

PARAMETRES ::=  PARENTHESEOUVERTE LDECL:ld PARENTHESEFERMEE
                {:
                    RESULT = ld;
                :}
                |
                PARENTHESEOUVERTE  PARENTHESEFERMEE
                {:
                    RESULT = new ArrayList<>();
                :}
                ;

VARSF  ::= VARIABLES LDECL:ld DEBUT
            {:
                RESULT = ld;
            :}
            |
            VARIABLES DEBUT
            {:
                RESULT = new ArrayList<>();
            :}
            ;

FONC    ::=     TYPE:t IDF:i PARAMETRES:lp VARSF:ld LINSTF:li  FIN
                {:

                    TDS.getInstance().entreeBloc();
                    // TODO Faire un truc plus propre
                    Type typeFonction = Type.fromString(t);
                    SymboleFonction symboleFonction = new SymboleFonction(typeFonction);
                    symboleFonction.setEspaceDeNom(TDS.getInstance().getEspaceDeNomCourant());


                    ArrayList<Type> typeParametres = new ArrayList<>(lp.size());

                    // Ajout des déclarations de paramètres
                    for (String[] declarationParam : lp) {
                        Type typeParametre = Type.fromString(declarationParam[0]);

                        typeParametres.add(typeParametre);

                        SymboleVariable s = new SymboleVariable(typeParametre);
                        try{
                            TDS.getInstance().ajouter(new EntreeVariable(declarationParam[1]), s);
                        } catch (DoubleDeclarationException e) {
                            GestionnaireExceptionsSemantiques.getInstance()
                                                .ajouter(new LigneDecorator(Integer.valueOf(declarationParam[2]), e));
                        }

                        s.setEspaceDeNom(TDS.getInstance().getEspaceDeNomCourant());
                        s.setDeplacement(TDS.getInstance().getTailleZoneParametres());
                        TDS.getInstance().augmenterTailleZoneParametres(typeParametre.taille);
                        TDS.getInstance().ajouterSymboleParametre(s);
                    }
                    // Ajout des déclarations de variables
                    for (String[] declarationVariable : ld) {
                        Type typeVariable = Type.fromString(declarationVariable[0]);

                        SymboleVariable s = new SymboleVariable(typeVariable);
                        try{
                            TDS.getInstance().ajouter(new EntreeVariable(declarationVariable[1]), s);
                        } catch (DoubleDeclarationException e) {
                            GestionnaireExceptionsSemantiques.getInstance()
                                                .ajouter(new LigneDecorator(Integer.valueOf(declarationVariable[2]), e));
                        }

                        s.setEspaceDeNom(TDS.getInstance().getEspaceDeNomCourant());
                        s.setDeplacement(-TDS.getInstance().getTailleZoneVariables());
                        TDS.getInstance().augmenterTailleZoneVariables(typeVariable.taille);
                    }
                    TDS.getInstance().sortieBloc();


                    EntreeFonction entreeFonction = new EntreeFonction(i, typeParametres);
                    symboleFonction.setEtiquette(entreeFonction.getIdentifiant() + TDS.getInstance().getNiveauImbricationCourant());

                    try{
                        TDS.getInstance().ajouter(entreeFonction, symboleFonction);
                    } catch (DoubleDeclarationException e) {
                        GestionnaireExceptionsSemantiques.getInstance()
                                            .ajouter(new LigneDecorator(ileft + 1, e));
                    }

                    Fonction f = new Fonction(entreeFonction, symboleFonction, tleft + 1);

                    f.ajouter(li);

                    RESULT = f;
                :}
                ;

LINSTF  ::=     LINSTF:bi  INSTF:i
                {:
                    bi.ajouter(i) ;
                    RESULT = bi ;
                :}
        |
                INSTF:i
                {:
                    BlocDInstructions bi = new BlocDInstructions(ileft + 1) ;
                    bi.ajouter(i) ;
                    RESULT = bi ;
                :}
                 ;

INSTF   ::=     INST:i
                {:
                    RESULT = i;
                :}
        |
                RETOURNEI:i
                {:
                    RESULT = i;
                :}
                ;

RETOURNEI   ::= RETOURNE EXP:e POINTVIRGULE
                {:
                    RESULT = new Retourne(e, eleft + 1) ;
                :}
                ;

LDECL   ::=     LDECL:ld DECL:d
                {:
                    ld.add(d);
                    RESULT = ld;
                :}
        |
                DECL:d
                {:
                    ArrayList<String[]> ld = new ArrayList<>();
                    ld.add(d);
                    RESULT = ld;
                :};

DECL    ::=     TYPE:t IDF:i POINTVIRGULE
                {:
                    RESULT = new String[]{t, i, Integer.toString(tleft + 1)};
                :};

LINST   ::=     LINST:bi  INST:i
                {: bi.ajouter(i) ;
                   RESULT = bi ; :}
        |
                INST:i
                {: BlocDInstructions bi = new BlocDInstructions(ileft + 1) ;
                   bi.ajouter(i) ;
                   RESULT = bi ; :}
                ;

INST    ::=     ECRIRE EXP:e POINTVIRGULE
                {: RESULT = new Ecrire(e, eleft + 1) ; :}
        |
                IDF:i EGAL EXP:e POINTVIRGULE
                {:
                    Variable v = new Variable(i, ileft + 1);
                    RESULT = new Affectation(v, e, ileft + 1) ;
                :}
                ;
    
EXP    ::=     CSTENTIERE:c
                {: RESULT = new ConstanteEntiere(c, cleft + 1) ; :}
        |
               CSTBOOL:c
                {:
                    RESULT = new ConstanteBooleene(c, cleft + 1) ;
                :}
        |
               IDF:i
                {:
                    RESULT = new Variable(i, ileft + 1) ;
                :}
        |
               IDF:i PAR_EFF:p
               {:
                    Expression[] tableauParametres = p.toArray(new Expression[p.size()]);
                    RESULT = new AppelFonction(i, ileft + 1, tableauParametres);
               :}
                ;

LEXP    ::=     LEXP:le VIRGULE EXP:e
                {:
                    le.add(e);
                    RESULT = le;
                :}
        |
                EXP:e
                {:
                    ArrayList<Expression> exps = new ArrayList<>();
                    exps.add(e);
                    RESULT = exps;
                :}
        ;

PAR_EFF ::=     PARENTHESEOUVERTE PARENTHESEFERMEE
                {:
                    ArrayList<Expression> exps = new ArrayList<>();
                    RESULT = exps;
                :}
         |
                PARENTHESEOUVERTE LEXP:le PARENTHESEFERMEE
                {:
                    RESULT = le;
                :}
                ;
